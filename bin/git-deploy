#!/usr/bin/env python

#check and load depedencies
ok = True
depedencies = ['sys','os','yaml','urllib.parse']
for dep in depedencies:
  try:
    vars()[dep] = __import__(dep)
  except ImportError:
    ok = False
    print ('Python Module "%s" not found, please install "python-%s"' % (dep,dep))

from urllib.parse import urlparse


class deployer:

  def __init__(self):
    #Set config file name
    self.config_file = 'deploy.yml'
    if 1 in sys.argv:
      self.config_file = sys.argv[1];

    ok = True
    #read config file
    if ok:
      ok = self.read_config()

    #check revision
    if ok:
      ok = self.check_revision()

  def read_config(self):
    if os.path.isfile(self.config_file)!=True:
      print ("Failed to parse configuration file, %s exists ?")
      return False
    else:
      f = open(self.config_file)
      config = yaml.load(f)
      self.config = {}
      for i in config:
        self.config[i] = urlparse(i)
        #self.config[i] = {'scheme':parsed.scheme,'netloc':parsed.netloc,'path':parsed.path,''}

        if 'scheme' in config[i]:
          print
          print (self.config[i].scheme)# = config[i].scheme


        #print (i)
        #print ()


      #print (self.config)
      f.close()
      return True

  def check_revision(self):
    print ("Checking revision")


#This class handle SFTP (SSH) connections
class SFTP:
  def __init__(self):
    print ("SFTP init")

#This class handle FTP connections
class FTP:
  def __init__(self):
    print ("FTP init")

#This class handle FTPS (FTP with SSL) connections
class FTPS:
  def __init__(self):
    print ('FTPS init')


#rock 'n' roll
if __name__ == "__main__":
  try:
    if ok:
      deployer = deployer()
    else:
      print ('Exiting...')
  except Exception as inst:
    print (str(inst))
