{"name":"Git-deploy","tagline":"Server side and client side Git deployement tool","body":"# git-deploy\r\n\r\n## Description\r\n\r\ngit-deploy is a deployment tool to allow for quick and easy deployments based on\r\nthe changes in a git repository, from git server on `git push` command, by adding as remote hook in github/gitlab or manualy from git repo :\r\n\r\ngit-deploy supports deployment over SSH and FTP/S\r\n\r\n## Installation\r\n\r\n### Debian/Ubuntu (DEB):\r\n\r\nAdd new repository by running this command: `sudo echo \"deb http://apt.salamek.cz debian/\" >> /etc/apt/sources.list` then just run `sudo apt-get update && sudo apt-get install git-deploy`\r\n\r\n### Archlinux:\r\n\r\nFor archlinux you can install package from AUR https://aur.archlinux.org/packages/git-deploy/\r\n\r\n### Fedora/Rhel (RPM):\r\n\r\n## Usage\r\n\r\n### Manual run\r\n\r\nJust run `git-deploy` in your git repo root\r\n\r\n### On push as `post-receive`\r\n\r\nJust simlink `/usr/bin/git-deploy` AS `post-receive` in hooks dir in repo you want to deploy\r\n\r\n### On push using GitHub or GitLab\r\n\r\nYou must run git-deploy as daemon, first please edit file in `/etc/git-deploy/config.py` (git-deploy.cfg is deprecated and will be migrated to new version) and make it suits your needs (config values should be Self-explanatory)\r\n\r\nThen just start `git-deploy` service and add it to your init if you want (for autostart on boot)\r\n\r\n#### GitHub\r\n\r\nTo deploy on `git push` to GitHub repo add a new webhook (Repo detail->Settings->Webhooks & Service->Add webhook) with this format of url : `http://[servername]:[port]/deploy.json` triggered on push\r\n\r\n#### GitLab\r\n\r\nIt's same as GitHub ;-)\r\n\r\n\r\n## Config file in deployed repo\r\n\r\nIn the root directory of your source code, create a <code>deploy.py</code> file (deploy.ini is deprecated and its support will be removed in next release).\r\n\r\nHere is a sample code for FTP acces (port can be omitted):\r\n\r\n    CONFIG = {\r\n    # Configure target or multiple targets\r\n      'targets': [\r\n        {\r\n          # Target uri, supported protocols are sftp, ftp, ftps format is standard URI\r\n          'uri': 'ftp://user:password@example.com/',\r\n\r\n          # Web hook to run remote hook after deploy is done, optional\r\n          'web_hook': 'http://example.com/your_hook',\r\n\r\n          # Enables disables this target\r\n          'enabled': True\r\n        }\r\n      ],\r\n      # Set special file rights to deployed files, relative to GIT root\r\n      'file_rights': {\r\n        'dir/file/*': 777,\r\n        'dir/file': 775\r\n      }\r\n    }\r\n\r\n## How It Works\r\n\r\n`git-deploy` stores file called `REVISION` on your server inside the root path to your application.\r\nThis file stores the current revision of your application residing on your server.\r\n\r\nWhen you run a `git deploy`, `git-deploy` downloads the `REVISION` file, and checks to see what\r\nfiles are different between revisions and either upload the changed files or delete them from the server.\r\n","google":"UA-39074555-2","note":"Don't delete this file! It's used internally to help with page regeneration."}